// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NellisScanner.Core.Models;
using NellisScanner.Web.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NellisScanner.Web.Migrations
{
    [DbContext(typeof(NellisScannerDbContext))]
    [Migration("20250425180754_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NellisScanner.Core.Models.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BidCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "RecordedAt");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("NellisScanner.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("BidCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CloseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "closeTime");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExtensionInterval")
                        .HasColumnType("integer");

                    b.Property<Grade>("Grade")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("InitialCloseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "initialCloseTime");

                    b.Property<string>("InventoryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<Location>("Location")
                        .HasColumnType("jsonb");

                    b.Property<string>("MarketStatus")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("OpenTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "openTime");

                    b.Property<string>("OriginType")
                        .HasColumnType("text");

                    b.Property<List<Photo>>("Photos")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("ProjectExtended")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NellisScanner.Core.Models.PriceHistory", b =>
                {
                    b.HasOne("NellisScanner.Core.Models.Product", "Product")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NellisScanner.Core.Models.Product", b =>
                {
                    b.Navigation("PriceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
