@page "/"
@using Microsoft.EntityFrameworkCore
@using NellisScanner.Core
@using NellisScanner.Core.Models
@using NellisScanner.Web.Data
@using System.Globalization
@inject NellisScannerDbContext DbContext

<PageTitle>Nellis Scanner - Home</PageTitle>

<div class="container mx-auto px-4">
    <div class="mb-8">
        <h1 class="text-4xl font-bold text-gray-800">Nellis Auctions Dashboard</h1>
        <p class="text-lg text-gray-600 mt-2">Track and monitor electronics auctions from Nellis Auctions.</p>
    </div>

    @if (Loading)
    {
        <div class="flex justify-center items-center my-12">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-blue-600 text-white rounded-lg shadow-lg p-6">
                <h5 class="font-medium text-lg">Active Auctions</h5>
                <h2 class="text-4xl font-bold">@ActiveAuctionsCount</h2>
            </div>
            <div class="bg-green-600 text-white rounded-lg shadow-lg p-6">
                <h5 class="font-medium text-lg">Closing Soon</h5>
                <h2 class="text-4xl font-bold">@ClosingSoonCount</h2>
                <p class="mt-2 text-green-100">Ending within 30 minutes</p>
            </div>
            <div class="bg-cyan-600 text-white rounded-lg shadow-lg p-6">
                <h5 class="font-medium text-lg">Total Value</h5>
                <h2 class="text-3xl font-bold">@TotalRetailValue.ToString("C0", CultureInfo.GetCultureInfo("en-US"))</h2>
                <p class="mt-2 text-cyan-100">Retail price</p>
            </div>
            <div class="bg-yellow-500 text-gray-800 rounded-lg shadow-lg p-6">
                <h5 class="font-medium text-lg">Current Bids</h5>
                <h2 class="text-3xl font-bold">@TotalCurrentBids.ToString("C0", CultureInfo.GetCultureInfo("en-US"))</h2>
                <p class="mt-2">Current price</p>
            </div>
        </div>

        <div class="grid md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-md h-full">
                <div class="border-b px-6 py-3">
                    <h5 class="font-semibold text-lg">Highest Value Auctions</h5>
                </div>
                <div class="p-6">
                    @if (TopValueAuctions.Any())
                    {
                        <div class="overflow-x-auto">
                            <table class="min-w-full">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Retail Price</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Price</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    @foreach (var auction in TopValueAuctions)
                                    {
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-4 py-3">
                                                <a href="auctions" class="text-blue-600 hover:underline" title="@auction.Title">
                                                    @TruncateString(auction.Title, 30)
                                                </a>
                                            </td>
                                            <td class="px-4 py-3">@auction.RetailPrice.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                                            <td class="px-4 py-3">@auction.CurrentPrice.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="bg-blue-50 text-blue-700 p-4 rounded">No auctions available</div>
                    }
                </div>
            </div>
            <div class="bg-white rounded-lg shadow-md h-full">
                <div class="border-b px-6 py-3">
                    <h5 class="font-semibold text-lg">Closing Soon</h5>
                </div>
                <div class="p-6">
                    @if (ClosingSoonAuctions.Any())
                    {
                        <div class="overflow-x-auto">
                            <table class="min-w-full">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Price</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Closes In</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    @foreach (var auction in ClosingSoonAuctions)
                                    {
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-4 py-3">
                                                <a href="auctions" class="text-blue-600 hover:underline" title="@auction.Title">
                                                    @TruncateString(auction.Title, 30)
                                                </a>
                                            </td>
                                            <td class="px-4 py-3">@auction.CurrentPrice.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                                            <td class="px-4 py-3">
                                                <span class="px-2 py-1 bg-yellow-100 text-yellow-800 rounded text-sm">
                                                    @FormatTimeRemaining(auction.CloseTime)
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="bg-blue-50 text-blue-700 p-4 rounded">No auctions closing soon</div>
                    }
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md">
            <div class="border-b px-6 py-3">
                <h5 class="font-semibold text-lg">Last Updated</h5>
            </div>
            <div class="p-6">
                <p class="text-gray-700">Data last refreshed: @(LastUpdated?.ToLocalTime().ToString("g") ?? "Never")</p>
            </div>
            <div class="px-6 py-3 bg-gray-50 flex flex-wrap gap-2">
                <a href="auctions" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">View All Auctions</a>
                <a href="/hangfire" target="_blank" class="px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-100 transition-colors">View Background Jobs</a>
            </div>
        </div>
    }
</div>

@code {
    private bool Loading { get; set; } = true;
    private int ActiveAuctionsCount { get; set; }
    private int ClosingSoonCount { get; set; }
    private decimal TotalRetailValue { get; set; }
    private decimal TotalCurrentBids { get; set; }
    private List<AuctionItem> TopValueAuctions { get; set; } = new();
    private List<AuctionItem> ClosingSoonAuctions { get; set; } = new();
    private DateTimeOffset? LastUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            // Get active auctions count
            ActiveAuctionsCount = await DbContext.Auctions
                .Where(p => p.State == AuctionState.Active)
                .CountAsync();

            // Get auctions closing within 30 minutes
            var thirtyMinutesFromNow = DateTimeOffset.UtcNow.AddMinutes(30);
            ClosingSoonCount = await DbContext.Auctions
                .Where(p => p.State == AuctionState.Active && 
                          p.CloseTime <= thirtyMinutesFromNow)
                .CountAsync();

            // Get total retail value and current bids
            var totals = await DbContext.Auctions
                .Where(p => p.State == AuctionState.Active)
                .GroupBy(p => 1)
                .Select(g => new { 
                    RetailValue = g.Sum(p => p.RetailPrice),
                    CurrentBids = g.Sum(p => p.CurrentPrice)
                })
                .FirstOrDefaultAsync();

            TotalRetailValue = totals?.RetailValue ?? 0;
            TotalCurrentBids = totals?.CurrentBids ?? 0;

            // Get top 5 auctions by retail price
            TopValueAuctions = await DbContext.Auctions
                .Where(p => p.State == AuctionState.Active)
                .OrderByDescending(p => p.RetailPrice)
                .Take(5)
                .ToListAsync();

            // Get top 5 auctions closing soon
            ClosingSoonAuctions = await DbContext.Auctions
                .Where(p => p.State == AuctionState.Active)
                .OrderBy(p => p.CloseTime)
                .Take(5)
                .ToListAsync();

            // Get last updated time from most recent auction update
            LastUpdated = await DbContext.Auctions
                .OrderByDescending(a => a.LastUpdated)
                .Select(a => a.LastUpdated)
                .FirstOrDefaultAsync();
        }
        catch (Exception ex)
        {
            // Handle any errors (in a real app you would log this)
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            Loading = false;
        }
    }

    private string TruncateString(string? input, int maxLength)
    {
        if (string.IsNullOrEmpty(input) || input.Length <= maxLength)
            return input ?? string.Empty;
            
        return input.Substring(0, maxLength) + "...";
    }

    private string FormatTimeRemaining(DateTimeOffset closeTime)
    {
        var timeRemaining = closeTime - DateTimeOffset.UtcNow;
        
        if (timeRemaining.TotalMinutes < 1)
            return "< 1 min";
            
        if (timeRemaining.TotalHours < 1)
            return $"{timeRemaining.Minutes} min";
            
        if (timeRemaining.TotalDays < 1)
            return $"{(int)timeRemaining.TotalHours}h {timeRemaining.Minutes}m";
            
        return $"{(int)timeRemaining.TotalDays}d {timeRemaining.Hours}h";
    }
}
