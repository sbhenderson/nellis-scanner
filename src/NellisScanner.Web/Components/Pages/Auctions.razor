@page "/auctions"
@using Microsoft.EntityFrameworkCore
@using NellisScanner.Core
@using NellisScanner.Core.Models
@using NellisScanner.Web.Data
@using System.Globalization
@inject NellisScannerDbContext DbContext

<PageTitle>Nellis Auctions' Auctions in Houston</PageTitle>

<div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Auctions</h1>

    <div class="mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <div class="flex">
                    <input type="text" @bind="SearchTerm" @bind:event="oninput" 
                           class="flex-1 rounded-l border-gray-300 shadow-sm px-4 py-2 focus:ring-blue-500 focus:border-blue-500" 
                           placeholder="Search by title..." />
                    <button @onclick="ApplyFilters" 
                            class="bg-blue-600 text-white px-4 py-2 hover:bg-blue-700 transition-colors">
                        Search
                    </button>
                    <button @onclick="ClearFilters" 
                            class="bg-gray-600 text-white px-4 py-2 rounded-r hover:bg-gray-700 transition-colors">
                        Clear
                    </button>
                </div>
            </div>
            <div>
                <select @bind="SortBy" class="w-full rounded border-gray-300 shadow-sm px-4 py-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="retail_desc">Retail Price (High to Low)</option>
                    <option value="retail_asc">Retail Price (Low to High)</option>
                    <option value="current_desc">Current Price (High to Low)</option>
                    <option value="current_asc">Current Price (Low to High)</option>
                    <option value="closing_soon">Closing Soon</option>
                    <option value="bid_count">Most Bids</option>
                </select>
            </div>
        </div>
    </div>
    
    @if (IsLoading)
    {
        <div class="flex justify-center items-center my-12">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (AuctionItems == null || !AuctionItems.Any())
    {
        <div class="bg-blue-50 text-blue-700 p-4 rounded">No auctions found.</div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var auction in AuctionItems)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
                    <div class="flex justify-between items-center px-4 py-2 bg-gray-50">
                        <span class="px-2 py-1 rounded text-xs font-semibold @(auction.State == AuctionState.Active ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800")">
                            @auction.State
                        </span>
                        <span class="px-2 py-1 rounded text-xs font-semibold bg-blue-100 text-blue-800">
                            ID: @auction.Id
                        </span>
                    </div>
                    
                    <div class="p-4">
                        <h5 class="text-lg font-semibold text-gray-800 mb-2 line-clamp-2">@auction.Title</h5>
                        <p class="text-xs text-gray-500 mb-3">
                            Inventory: @auction.InventoryNumber
                        </p>
                        
                        <div class="space-y-2">
                            <div class="flex justify-between border-t border-gray-100 pt-2">
                                <span class="text-sm text-gray-500">Retail Price:</span>
                                <span class="font-medium">@auction.RetailPrice.ToString("C", CultureInfo.GetCultureInfo("en-US"))</span>
                            </div>
                            <div class="flex justify-between border-t border-gray-100 pt-2">
                                <span class="text-sm text-gray-500">Current Price:</span>
                                <span class="font-medium">@auction.CurrentPrice.ToString("C", CultureInfo.GetCultureInfo("en-US"))</span>
                            </div>
                            <div class="flex justify-between border-t border-gray-100 pt-2">
                                <span class="text-sm text-gray-500">Bids:</span>
                                <span class="font-medium">@auction.BidCount</span>
                            </div>
                            <div class="flex justify-between border-t border-gray-100 pt-2">
                                <span class="text-sm text-gray-500">Closes:</span>
                                <span class="font-medium">@auction.CloseTime.ToLocalTime().ToString("g")</span>
                            </div>
                            <div class="flex justify-between border-t border-gray-100 pt-2">
                                <span class="text-sm text-gray-500">Location:</span>
                                <span class="font-medium">@auction.Location</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="flex justify-between items-center mt-8">
            <button class="px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed" 
                    disabled="@(CurrentPage <= 0)" 
                    @onclick="PreviousPage">
                Previous
            </button>
            <span class="text-gray-700">Page @(CurrentPage + 1) of @TotalPages</span>
            <button class="px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed" 
                    disabled="@(CurrentPage >= TotalPages - 1)" 
                    @onclick="NextPage">
                Next
            </button>
        </div>
    }
</div>

@code {
    private List<AuctionItem>? AuctionItems { get; set; }
    private bool IsLoading { get; set; } = true;
    private int CurrentPage { get; set; } = 0;
    private int PageSize { get; set; } = 12;
    private int TotalPages { get; set; } = 1;
    private string SearchTerm { get; set; } = "";
    private string SortBy { get; set; } = "retail_desc";

    protected override async Task OnInitializedAsync()
    {
        await LoadAuctionsAsync();
    }

    private async Task LoadAuctionsAsync()
    {
        IsLoading = true;
        try
        {
            // Create a query for auctions
            IQueryable<AuctionItem> query = DbContext.Auctions;

            // Apply search filter if provided
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                query = query.Where(a => a.Title != null && a.Title.Contains(SearchTerm));
            }

            // Apply sorting
            query = SortBy switch
            {
                "retail_desc" => query.OrderByDescending(a => a.RetailPrice),
                "retail_asc" => query.OrderBy(a => a.RetailPrice),
                "current_desc" => query.OrderByDescending(a => a.CurrentPrice),
                "current_asc" => query.OrderBy(a => a.CurrentPrice),
                "closing_soon" => query.OrderBy(a => a.CloseTime),
                "bid_count" => query.OrderByDescending(a => a.BidCount),
                _ => query.OrderByDescending(a => a.RetailPrice)
            };

            // Get total count for pagination
            var totalCount = await query.CountAsync();
            TotalPages = (int)Math.Ceiling(totalCount / (double)PageSize);

            // Apply pagination
            AuctionItems = await query
                .Skip(CurrentPage * PageSize)
                .Take(PageSize)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            // In a real app, you would log the exception
            Console.WriteLine($"Error loading auctions: {ex.Message}");
            AuctionItems = new List<AuctionItem>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        CurrentPage = 0;
        await LoadAuctionsAsync();
    }

    private async Task ClearFilters()
    {
        SearchTerm = "";
        SortBy = "retail_desc";
        CurrentPage = 0;
        await LoadAuctionsAsync();
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;
            await LoadAuctionsAsync();
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages - 1)
        {
            CurrentPage++;
            await LoadAuctionsAsync();
        }
    }
}